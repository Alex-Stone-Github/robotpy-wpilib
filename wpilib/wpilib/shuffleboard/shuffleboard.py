# validated: 2018-11-18 EN 175c6c1f0130 edu/wpi/first/wpilibj/shuffleboard/Shuffleboard.java

from networktables import NetworkTablesInstance
from .tab import ShuffleboardTab
from .instance import ShuffleboardInstance


__all__ = ["Shuffleboard"]


class Shuffleboard:
    """
    The Shuffleboard class provides a mechanism with which data can be added 
    and laid out in the Shuffleboard dashboard application from a robot program.
    Tabs and layouts can be specified, as well as choosing which widgets to 
    display with and setting properties of these widgets; for example, 
    programmers can specify a specific {@code boolean} value to be displayed 
    with a toggle button instead of the default colored box, or set custom 
    colors for that box.

    For example, displaying a boolean entry with a toggle button:
    .. code-block:: python
        myBoolean = (Shuffleboard.getTab("Example Tab")
            .add("My Boolean", False)
            .withWidget("Toggle Button")
            .getEntry())


    Changing the colors of the boolean box:
    .. code-block:: python
        myBoolean = (Shuffleboard.getTab("Example Tab")
            .add("My Boolean", False)
            .withWidget("Boolean Box")
            .withProperties({"colorWhenTrue": "green", "colorWhenFalse": "maroon"})
            .getEntry())

    Specifying a parent layout. Note that the layout type must *always* be 
    specified, even if the layout has already been generated by a previously 
    defined entry.
    .. code-block:: python
        myBoolean = (Shuffleboard.getTab("Example Tab")
            .getLayout("List", "Example List")
            .add("My Boolean", False)
            .withWidget("Toggle Button")
            .getEntry())

    Teams are encouraged to set up shuffleboard layouts at the start of the 
    robot program.

    """

    #: The name of the base NetworkTable into which all Shuffleboard data will be added.
    kBaseTableName = "/Shuffleboard"

    _root = None

    @classmethod
    def root(cls):
        if cls._root is None:
            cls._root = ShuffleboardInstance(NetworkTablesInstance.getDefault())

        return cls._root

    @classmethod
    def _reset(cls):
        cls._root = None

    @classmethod
    def update(cls) -> None:
        """
        Updates all the values in Shuffleboard. Iterative and timed robots are 
        pre-configured to call this method in the main robot loop; teams using 
        custom robot base classes, or subclass SampleRobot, should make sure 
        to call this repeatedly to keep data on the dashboard up to date.
        """
        cls.root().update()

    @classmethod
    def getTab(cls, title: str) -> ShuffleboardTab:
        """
        Gets the Shuffleboard tab with the given title, creating it if it does 
        not already exist.

        :param title: the title of the tab

        :returns: the tab with the given title
        """
        return cls.root().getTab(title)

    @classmethod
    def enableActuatorWidgets(cls) -> None:
        """
        Enables user control of widgets containing actuators: speed 
        controllers, relays, etc. This should only be used when the robot is 
        in test mode. IterativeRobotBase and SampleRobot are both configured to 
        call this method when entering test mode; most users should not need to 
        use this method directly.
        """
        cls.root().enableActuatorWidgets()

    @classmethod
    def disableActuatorWidgets(cls) -> None:
        """
        Disables user control of widgets containing actuators. For safety 
        reasons, actuators should only be controlled while in test mode. 
        IterativeRobotBase and SampleRobot are both configured to call this 
        method when exiting in test mode; most users should not need to use 
        this method directly.
        """
        cls.update()
        cls.root().disableActuatorWidgets()
